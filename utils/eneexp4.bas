' ene exporter
' generates minimal contents for usage in small ROMs.

sub usage
	print "$ eneexp4 enems.ene out.h prefix [yadjust] [nohotspots]"
End Sub

Sub outputArr (arr () As Integer, fOut As Integer, upperBound As Integer)
	Dim As Integer i
	Dim As Integer hl

	hl = 0
	For i = 0 To upperBound
		If hl = 0 Then Print #fOut, "	";
		Print #fOut, "0x" & Lcase (Hex (arr (i), 2));
		If i < upperBound Then Print #fOut, ", ";
		hl = hl + 1: If hl = 8 Then hl = 0: Print #fOut, ""
	Next i
	If hl <> 0 Then Print #fOut, ""
End Sub

Dim As Integer fIn, fOut
Dim As uByte d, a, b
Dim As String Dummy, prefix
Dim As Integer mapW, mapH, nEnems, mapPants, nPant, i, j, hl, yadjust, noHotspots
Dim As uByte t, xy1, xy2, mn
Dim As Integer typeCounters (255)
Dim As Integer arxy1 (255), arxy2 (255), art (255), armn (255)
Dim As Integer idx

If Command (3) = "" Then usage: End
prefix = Command (3)

If (Command (4) <> "" And Command (4) <> "nohotspots") Or (Command (4) <> "" And Command (4) <> "nohotspots") Then yadjust = Val (Command (4)) Else yadjust = 0
If Command (4) = "nohotspots" Or Command (5) = "nohotspots" Then noHotspots = -1 Else noHotspots = 0

' Outputs 4 bytes per entry
' T for type
' XY for ini
' XY for end
' MN for properties

' .ENE contains...
' t x1 y1 x2 y2 n s1 s2
' n is speed
' s1, s2 are unused.

fIn = FreeFile
Open Command (1) For Binary As #fIn
fOut = FreeFile
Open Command (2) For Output As #fOut

' Skip header
dummy = Input (256, fIn)
Get #fIn, , d: mapW = d
Get #fIn, , d: mapH = d
Get #fIn, , d: Get #fIn, , d
Get #fIn, , d: nEnems = d

mapPants = mapW * mapH
For i = 0 To (mapPants * nEnems) - 1
	Get #fIn, , t: art (i) = t
	Get #fIn, , a: Get #fIn, , b: If t <> 0 Then b = b + yadjust
	xy1 = (b Shl 4) Or (a And 15): arxy1 (i) = xy1
	Get #fIn, , a: Get #fIn, , b: If t <> 0 Then b = b + yadjust
	xy2 = (b Shl 4) Or (a And 15): arxy2 (i) = xy2
	Get #fIn, , mn: armn (i) = mn
	Get #fIn, , d: Get #fIn, , d
Next i

Print #fOut, "// " & Command (2)
Print #fOut, "// Generated by eneexp4.exe v0.3 [20170119]"
Print #fOut, "// Copyleft 2017 The Mojon Twins"
Print #fOut, ""
Print #fOut, "// Enems structure is broken down in 4 different arrays"
Print #fOut, "// y coordinates are adjusted by " & yadjust & " positions"
Print #fOut, ""
Print #fOut, "const unsigned char enems_t_" & prefix & " [] = {"
outputArr art (), fOut, (mapPants * nEnems) - 1
Print #fOut, "};"
Print #fOut, ""
Print #fOut, "const unsigned char enems_yx1_" & prefix & " [] = {"
outputArr arxy1 (), fOut, (mapPants * nEnems) - 1
Print #fOut, "};"
Print #fOut, ""
Print #fOut, "const unsigned char enems_yx2_" & prefix & " [] = {"
outputArr arxy2 (), fOut, (mapPants * nEnems) - 1
Print #fOut, "};"
Print #fOut, ""
Print #fOut, "const unsigned char enems_mn_" & prefix & " [] = {"
outputArr armn (), fOut, (mapPants * nEnems) - 1
Print #fOut, "};"
Print #fOut, ""
If Not noHotspots Then
	Print #fOut, "// Hotspots structure is broken down in 2 different arrays"
	Print #fOut, "// y coordinates are adjusted by " & yadjust & " positions"
	Print #fOut, ""

	For i = 0 To mapPants - 1
		Get #fIn, , xy1
		Get #fIn, , xy2: xy2 = xy2 + yadjust
		xy1 = (xy2 Shl 4) Or (xy1 And 15): arxy1 (i) = xy1
		Get #fIn, , t: If t = 0 Then xy1 = 0: xy2 = 0: arxy1 (i) = 0
		art (i) = t
		typeCounters (t) = typeCounters (t) + 1
	Next i

	Print #fOut, "const unsigned char hotspots_t_" & prefix & " [] = {"
	outputArr art (), fOut, mapPants - 1
	Print #fOut, "};"
	Print #fOut, ""
	Print #fOut, "const unsigned char hotspots_yx_" & prefix & " [] = {"
	outputArr arxy1 (), fOut, mapPants - 1
	Print #fOut, "};"
	Print #fOut, ""	
	
	For i = 0 To 255
		If typeCounters (i) <> 0 then
			Print #fOut, "#define MAX_HOTSPOTS_" & Ucase (prefix) & "_TYPE_" & i & "	" & typeCounters (i)	
		End If
	Next i
End If

Close fIn, fOut
